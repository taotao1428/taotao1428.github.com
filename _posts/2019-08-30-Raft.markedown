# Raft算法

另一个使用比较多的分布式算法。redis中的leader就是使用了Raft算法。

Raft算法包含了两方面的内容

1. leader选举
2. 同步复制



## 概念介绍

### 角色

#### 1. 节点

节点是构成集群的基本元素，节点在实际工作中又会有自己的角色。每个节点有下列属性

| 属性           | 说明                                                         |
| -------------- | ------------------------------------------------------------ |
| currentTerm    | 用于表示当前节点的任期                                       |
| voteFor        | 获得自己投票的节点Id，如果没有为其他节点投票，该值为null     |
| logs[]         | 是一组记录，用于存放来log。每个log包含**有效内容**和**log被写入时leader的任期**。任期对选举和复制都很重要 |
| committedIndex | 已经提交到状态机的**最大**日志索引                           |



![](C:\Users\h50002072\Documents\自己电脑笔记\分布式算法\图片\leader节点.jpg)



#### 2. Leader

整个集群同一时间最多只能有一个**有效**的leader。leader接受客户端的log请求。它会不断向follower和candidate发送AppendEntities请求，该请求即可以发送日志给follower和candidate还可以作为leader的心跳。

| 属性        | 说明                                                         |
| ----------- | ------------------------------------------------------------ |
| nextIndex[] | 每个follower有一个值，值为已经同步到follower的最大日志索引 + 1 |
|             |                                                              |



#### 3. follower

当节点收到leader的AppendEntities的**有效请求**之后，节点将会切换为follower。follower主要的工作就是接受leader的AppendEntities请求，将请求中的log保存到本地。



#### 4. candidate

当节点竞选leader时，它就会切换到candidate状态。candidate会向其他节点发送VoteForMe请求，当candidate接收到半数以上的赞成票之后，他将会切换成leader。





### 请求

所有节点间的通信都是通过两种请求

#### 1. VoteForMe请求

请求的内容

| 属性         | 说明                                     |
| ------------ | ---------------------------------------- |
| term         | candidate的currentTerm                   |
| lastLogIndex | candidate上logs的最大索引                |
| lastLogTerm  | candidate上logs的最大索引对应的log的term |
|              |                                          |

返回内容

| 属性    | 说明                                    |
| ------- | --------------------------------------- |
| term    | 接收节点的currentTerm                   |
| success | true表示投了赞同票，false表示投了反对票 |

当节点切换为candidate时，会将自己的currentTerm+1，然后发送请求给所有其他节点。

节点投赞同票需要满足下面3个条件

1. candidate中**term要大于**节点的currentTerm。也就是请求中的term要大于节点currentTerm
2. candidate中的日志数组要比**节点的新**。
3. 节点voteFor现在为null。每次投票完之后，节点会设置voteFor，在下个任期会清除，保证一个任期只能投一次



> 如果比较两个日志数组谁更新？
>
> 1. 先比较lastLogTerm，也就是最后一个日志的term，lastLogTerm越大越新
> 2. 再比较lastLogIndex，也就是最后一个日志的索引，lastLogIndex越大越新
> 3. 如果两者都相等，表示两个日志数组一样新



#### 2. AppendEntities请求

请求的内容

| 属性                 | 说明                                                         |
| -------------------- | ------------------------------------------------------------ |
| term                 | leader的currentTerm                                          |
| preLogIndex          | 请求中日志的前一个日志的索引                                 |
| preLogTerm           | 请求中日志的前一个日志的索引的term。follower用来校验是否应该将请求中日志保存到本地 |
| logs[]               | 发送给follower的日志                                         |
| leaderCommittedIndex | leader上的committedIndex。follower用来判断哪些日志可以提交。 |

响应

| 属性    | 说明                                      |
| ------- | ----------------------------------------- |
| term    | follower的currentTerm                     |
| success | true表示正确接收了日志，false表示校验失败 |
|         |                                           |

AppendEntities请求由leader发出，有两个作用

1. 将日志发送给其他节点。当有日志需要发送给其他节点的时候发送
2. 作为leader的心跳。当没有日志需要发送时也会定时发送。

> 当竞选成功时，新leader会立即发送AppendEntities请求给其他几点，避免其他节点再次发起竞选。



follower的**检验规则**

1. 根据请求中的preLogIndex找到本地的日志
2. 然后对比请求中的preLogTerm与该日志的term是否相同
3. 如果相同表示可以正确接收请求中的日志，否则不应接收。

当leader接收到success为false时，会将follower的对应的nextIndex - 1，然后重新发送AppendEntities请求。**为什么这种协商可以保证日志的一致性，请看后面的安全性证明**。



## Leader选举

![](C:\Users\h50002072\Documents\自己电脑笔记\分布式算法\图片\状态切换.png)

上图可以很明显的表示节点在3中角色中的切换。下面两个状态的切换需要注意

1. Leader -> Follower。当leader从**AppendEntities响应**中或者从**AppendEntities或VoteForMe请求**中发现存在一个更高的term，leader将会切换成follower
2. Candidate -> Follower。当Candidate从VoteForMe响应中发现存在更高的term，会切换成Follower。当Candidate接收term**大于或等于**自己currentTerm的AppendEntities请求时，也会切换成Follower



## 日志复制

![](C:\Users\h50002072\Documents\自己电脑笔记\分布式算法\图片\日志复制.jpg)

leader会通过AppendEntities请求，将follower的日志设置成与自己一样。如果存在在**自己任期添加的log**被同步到半数以上的follower中，leader将会修改committedId为该log的索引，也就是该日志和他之前的日志都将被提交。

**如果不是自己任期添加的log，即使leader将其同步到半数以上follower中，也不能单独将其提交，一定要有一个自己任期添加的log被同步到半数以上的follower中才能提交，否则会导致不一致。**

![](C:\Users\h50002072\Documents\自己电脑笔记\分布式算法\图片\特殊情况.jpg)

看上面的图，S表示节点，每一列表示一个term，边框加粗的节点为leader

1. 看c列中，此时S1为leader，它将(2,2)复制到3个节点中，此时(3,4)还没有复制到半数以上节点上
2. 如果此时S1将(2,2)提交，提交后S1宕机，S5获得leader。那么看d列，(2,2)将会被(2,3)覆盖。此时将出现不一致，因为有些节点应用了(2,2)有些节点没有。
3. 如果s1在(3,4)复制到半数以上节点时再一起提交(2,2)，(3,4)，将可以保证(2,2)不会被其他leader覆盖。



## 安全性证明

### 1. 有效leader最多存在一个

有效leader：能将log通过AppendEntities请求成功写入半数以上节点的leader。

由于网络隔离的问题，确实会导致多个leader的情况。

证明：

先证明多个leader的情况，只有任期最大的leader可能是有效的

当任期最大的leader选举成功的时候，会将半数以上的follower的term设置成它的term，也就是term较低的leader的AppendEntities请求不会被半数以上的节点处理。所以只有任期最大的leader才可能有效。



再证明不会同时存在两个term相同的leader

因为follower在同一个term仅会向1个candidate投票，而每个candidate需要半数以上投票才可以成为leader。所以不可能同时存在term相同的两个leader。



综上在所有可能存在leader中，只有term最大的那个leader可能有效



~~假设在candidate竞选时，已经存在一个任期为term1的leader，那么此时必定存在半数以上的follower任期为term1。~~

1. ~~如果是**任期小于或等于term1**的candidate去竞争leader，那么会存在半数以上的follower不会给他投赞成票，那么竞选不会成功。~~
2. ~~如果是**任期为term2 > term1**的candidate去竞争leader，如果candidate成功竞选，那么他必定会把半数以上的follower的任期设置成term2。那么原leader的follower个数就少于半数，也就是原leader将会失效。~~

~~综上两个有效的leader是互斥，不可能同时存在。~~



### 2. 两个日志的索引和任期相同，那么这个日志之前的所有日志是完全相同的

该结论为AppendEntities请求的工作原理提供基础。

证明：

假设相同日志为（INDEX, TERM）,即索引为INDEX，任期为TERM

反证法：

我们从INDEX位置往回看，找到第一个不同的位置。不同的情况有两种

1. term同时变，且变化的值不一样
2. 其中一个term变化。

先讨论第一种情况

| 节点 \ 索引 | 1    | 2    | 3    | 4    | 5    | 6    |
| ----------- | ---- | ---- | ---- | ---- | ---- | ---- |
| S1          |      |      |      | 2    | 4    | 4    |
| S2          |      |      |      | 3    | 4    | 4    |

表格中INDEX=6，TERM=4，在索引为4的地方出现不同







### 3. 日志一旦提交，将会出现后面所有leader的日志中

该结论为集群最终一致性提供了保证



### 选举过程

1. 候选者将**自己的term+1**，并**投票给自己**，并**设置竞选超时定时器**。
2. 向其他服务器发送竞选请求。
3. 如果接收到一半以上的赞同票，将会升级为leader；向其他服务器发送通知请求。
4. 如果期间接收到新leader的通知请求。将会切换为follower
5. 如果收到一半以上的反对票或者竞选超时。将会等待一段时间，回到第1步，再次竞选



#### 1. 发起竞选的时间切换

向介绍两个定时器

1. 竞选定时器：该定时器触发时，会触发竞选操作
2. 竞选超时定时器：在执行竞选时，如果竞选超时定时器触发，说明此次竞选超时，将会停止本次竞选



| 事件\状态          | follower                                                     | candidate                                                    | leader                                                       |
| ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |
| 竞选定时器触发     | 发起竞选                                                     | 发起竞选                                                     | \                                                            |
| 竞选超时定时器触发 | \                                                            | 停止此次竞选。并设置竞选定时器，取消竞选超时定时器           | \                                                            |
| 接收leader通知请求 | 如果term高于自己，更新本地状态。如果term高于或等于自己，将会重置竞选定时器。其他情况忽略 | 如果term高于或等于自己，将自己状态切换为follower。更新本地状态，重置竞选定时器，取消竞选超时定时器。 | 如果term高于自己，将会切换为follower。更新本地状态，重置竞选定时器。 |
| 接收到一半反对票   | \                                                            | 重置竞选定时器，取消竞选超时定时器                           | \                                                            |
| 接收到投票请求     | 如果term高于自己，根据情况投票。否则忽略或者反对票。         | 如果term高于自己，更新本地状态。重置竞选定时器，取消竞选超时定时器 | 如果term高于自己，根据情况投票。                             |
| 收到一半以上赞成票 | \                                                            | 切换成leader，重置                                           |                                                              |
|                    |                                                              |                                                              |                                                              |



##### 1. follower状态竞选定时器触发

此时follower将回发起竞选。取消竞争定时器，设置竞选超时定时器

##### 2. candidate状态竞选超时定时器触发

此时candidate将会停止此次竞选。并设置竞选定时器，取消竞选超时定时器

##### 3. candidate状态，接收到新leader消息

此时将会切换为follower状态。会重新设置竞选定时器，取消竞选超时定时器

##### 4. candidate状态接收到一半反对票

将会重置candidate状态。会重新设置竞选定时器，取消竞选超时定时器

##### 5. 收到更高term的投票请求

如果是candidate，将重置此次竞选。重置竞选定时器，取消竞选超时定时器

如果是follower，会重置竞选定时器

如果是leader，

##### 6. candidate状态接收到一半以上赞成票

将会切换为leader。取消竞选定时器，取消竞选超时定时器



timeout超时。服务器内部会存在一个定时器，当长时间没有收到leader的heartbeat，定时器将会触发，然后执行竞选操作。



#### 

##### 重置定时器

1. 处于follower状态：每次接收到leader的heartbeat都会重置定时器

1. 处于candidate状态：在开始竞选的时候会设置**竞选定时器**，**用于控制竞选过程超时**或在**竞选定时器超时**或接收到**新leader消息**或已经**接收到一半反对票**或接收到**更高term的投票请求**时，都会重置定时器。



#### 2. 投赞同票的条件

需要同时满足下面两个条件

1. candidate的**term要大于**投票者。
2. candidate包含的**日志不能少于**投票者。为了日志同步做准备。

> ~~在投票之后投票者会**更新本地的term为candidate的term**。这也就保证一个term只会投票一次~~



